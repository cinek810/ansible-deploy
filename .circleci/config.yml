# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  prepare_env:
    docker:
      - image: almalinux
    resource_class: small
    steps:
#      - run:
#          command: dnf update -y
      - run:
          command: dnf install -y epel-release
      - run:
          command: dnf install -y ansible python3 python3-pip
      - checkout
      - run:
          name: "Install ansible-deployer"
          command: "pip3.6 install ."
      - run:
          name: "Copy configuration files"
          command: cp -r ./etc /etc/ansible-deployer
      - run:
          name: "Add user to test_group"
          command: |
            groupadd test_group
            gpasswd -a root test_group
            groups
            /bin/bash -lc 'groups'
      - run:
          name: "Run shell script for argument parsing"
          command: |
            ./tests/01-test_argument_parsing.sh
            ./tests/02-checkrun.sh
            mkdir -p /etc/alt-workdir
            ./tests/02a-checkrun_with_self_setup.sh
            rm -rf /etc/alt-workdir
            mv /etc/ansible-deployer /etc/alternate-deployer-dir
            mkdir -p /etc/ansible-deployer/hooks
            cp ./etc/hooks/setup_work_dir.sh /etc/ansible-deployer/hooks/
            ./tests/02b-checkrun_with_conf_dir.sh
            rm -rf /etc/ansible-deployer
            rm -rf /etc/alternate-deployer-dir
            cp -r ./etc /etc/ansible-deployer
            ./tests/05-permission_checks.sh
      - run:
          name: "Copy failing hooks"
          command: cp ./tests/files/etc/hooks/* /etc/ansible-deployer/hooks
      - run:
          name: "Run shell script for error returning hook"
          command: |
            cp ./tests/files/etc/tasks_error_hook.yaml /etc/ansible-deployer/tasks.yaml
            ./tests/04-error_hook.sh
      - run:
          name: "Run shell script for error returning hook with exit"
          command: |
            cp ./tests/files/etc/tasks_exit_hook.yaml /etc/ansible-deployer/tasks.yaml
            ./tests/04-exit_hook.sh
      - run:
          name: "Run shell script for critical returning hook"
          command: |
            chmod 0644 /etc/ansible-deployer/hooks/exit_hook.sh
            ./tests/04-critical_hook.sh
      - run:
          name: "Create incompatible config file"
          command: cp ./tests/files/incompatible_config.yml /etc/ansible-deployer
      - run:
          name: "Run shell script for invalid config tests"
          command: |
            ./tests/03-invalid_configs.sh

  install_and_exec:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: almalinux
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Install ansible-deploy"
          command: "pip3.6 install ."
      - run:
          command: "cat $(which ansible-deploy)"
      - run:
          name: "Simple exec"
          command: "ansible-deploy"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  tests-without-ansible-playbook:
    jobs:
      - prepare_env
        #      - install_and_exec:
        #          requires:
        #            - prepare_env

